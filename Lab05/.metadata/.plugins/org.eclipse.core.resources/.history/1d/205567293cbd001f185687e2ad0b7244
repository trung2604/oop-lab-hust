package hust.soict.itep.aims;

import hust.soict.itep.aims.cart.Cart;
import hust.soict.itep.aims.store.Store;
import hust.soict.itep.aims.media.*;

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

import javax.naming.LimitExceededException;

public class Aims {

    public static void main(String[] args) throws LimitExceededException {
        // Khoi tạo cac đoi tuong Store và Cart
        Store store = new Store();
        Cart cart = new Cart();

        // Them cac Media mau vao Store
        Media dvd = new DigitalVideoDisc(1, "The Lion King", "Animation", 19.95f, 87, "Roger Allers");

        List<String> authors = new ArrayList<String>();
        authors.add("To Hoai");
        authors.add("Nguyen Huy Tuong");
        Media book = new Book(2, "Tuoi tre du doi", "Ki su", 6.5f, authors);

        ArrayList<Track> tracks = new ArrayList<Track>();
        tracks.add(new Track("End of the world", 3));
        tracks.add(new Track("Eternal sunshine", 4));
        Media cd = new CompactDisc(3, "Eternal sunshine", "Pop", 5.5f, "Ariana Grande", tracks);

        store.addMedia(dvd);
        store.addMedia(book);
        store.addMedia(cd);

        Scanner scanner = new Scanner(System.in);

        // Hiển thị menu chính
        while (true) {
            showMenu();
            int choice = getUserChoice(scanner, 0, 3);

            switch (choice) {
                case 1 -> viewStore(scanner, store, cart);
                case 2 -> updateStoreMenu(scanner, store);
                case 3 -> viewCart(scanner, cart);
                case 0 -> {
                    System.out.println("Exiting AIMS. Goodbye!");
                    scanner.close();
                    return;
                }
            }
        }
    }

    public static void showMenu() {
        System.out.println("AIMS: ");
        System.out.println("--------------------------------");
        System.out.println("1. View store");
        System.out.println("2. Update store");
        System.out.println("3. See current cart");
        System.out.println("0. Exit");
        System.out.println("--------------------------------");
        System.out.println("Please choose a number: 0-1-2-3");
    }

    public static void storeMenu() {
        System.out.println("Options: ");
        System.out.println("--------------------------------");
        System.out.println("1. See a media’s details");
        System.out.println("2. Add a media to cart");
        System.out.println("3. Play a media");
        System.out.println("4. See current cart");
        System.out.println("0. Back");
        System.out.println("--------------------------------");
        System.out.println("Please choose a number: 0-1-2-3-4");
    }

    public static void mediaDetailsMenu() {
        System.out.println("Options: ");
        System.out.println("--------------------------------");
        System.out.println("1. Add to cart");
        System.out.println("2. Play");
        System.out.println("0. Back");
        System.out.println("--------------------------------");
        System.out.println("Please choose a number: 0-1-2");
    }

    public static void cartMenu() {
        System.out.println("Options: ");
        System.out.println("--------------------------------");
        System.out.println("1. Filter medias in cart");
        System.out.println("2. Sort medias in cart");
        System.out.println("3. Remove media from cart");
        System.out.println("4. Play a media");
        System.out.println("5. Place order");
        System.out.println("0. Back");
        System.out.println("--------------------------------");
        System.out.println("Please choose a number: 0-1-2-3-4-5");
    }

    private static void viewStore(Scanner scanner, Store store, Cart cart) throws LimitExceededException {
        System.out.println(store);

        while (true) {
            storeMenu();
            int choice = getUserChoice(scanner, 0, 4);

            switch (choice) {
                case 1 -> seeMediaDetails(scanner, store, cart);
                case 2 -> addMediaToCart(scanner, store, cart);
                case 3 -> playMedia(scanner, store);
                case 4 -> viewCart(scanner, cart);
                case 0 -> {
                    return;
                }
            }
        }
    }

    private static void seeMediaDetails(Scanner scanner, Store store, Cart cart) throws LimitExceededException {
        System.out.print("Enter the title of the media: ");
        String title = scanner.nextLine();
        Media media = store.findMedia(title);

        if (media == null) {
            System.out.println("Media not found.");
            return;
        }

        System.out.println(media);

        while (true) {
            mediaDetailsMenu();
            int choice = getUserChoice(scanner, 0, 2);

            switch (choice) {
                case 1 -> cart.addMedia(media);
                case 2 -> {
                    if (media instanceof Playable playable) {
                        playable.play();
                    } else {
                        System.out.println("This media cannot be played.");
                    }
                }
                case 0 -> {
                    return;
                }
            }
        }
    }

    private static void addMediaToCart(Scanner scanner, Store store, Cart cart) throws LimitExceededException {
        System.out.print("Enter the title of the media: ");
        String title = scanner.nextLine();
        Media media = store.findMedia(title);
        if (media != null) {
            cart.addMedia(media);
        } else {
            System.out.println("Media not found.");
        }
    }

    private static void playMedia(Scanner scanner, Store store) {
        System.out.print("Enter the title of the media: ");
        String title = scanner.nextLine();
        Media media = store.findMedia(title);

        if (media instanceof Playable playable) {
            playable.play();
        } else {
            System.out.println("This media cannot be played or was not found.");
        }
    }

    public static void updateStoreMenu(Scanner scanner, Store store) {
        while (true) {
            System.out.println("""
                    ==========================
                    1. Add Media
                    2. Delete Media
                    3. Update Media in Store
                    0. Back
                    ==========================
                    Option: """);
            int option = scanner.nextInt();
            scanner.nextLine(); // Clear buffer

            switch (option) {
                case 1 -> addMedia(scanner, store);
                case 2 -> deleteMedia(scanner, store);
                case 3 -> updateMedia(scanner, store);
                case 0 -> {
                    return; // Exit menu
                }
                default -> System.out.println("Invalid option! Please try again.");
            }
        }
    }

    private static void addMedia(Scanner scanner, Store store) {
        System.out.println("""
                1. DigitalVideoDisc
                2. CompactDisc
                3. Book
                -------
                -> Your type: """);
        int type = getValidIntInput(scanner, "Choose a type (1-3): ", 1, 3);

        int id = getValidIntInput(scanner, "Enter id: ");
        
        // Kiểm tra nếu id đã tồn tại trong cửa hàng
        if (store.getItemsInStore().stream().anyMatch(media -> media.getId() == id)) {
            System.out.println("Error: Media with ID " + id + " already exists! Please choose a different ID.");
            return;  // Quay lại menu mà không thêm media mới
        }

        scanner.nextLine(); // Clear buffer
        System.out.print("Enter title: ");
        String title = scanner.nextLine();
        System.out.print("Enter category: ");
        String category = scanner.nextLine();
        float cost = getValidFloatInput(scanner, "Enter cost: ");
        scanner.nextLine();

        switch (type) {
            case 1 -> addDigitalVideoDisc(scanner, store, id, title, category, cost);
            case 2 -> addCompactDisc(scanner, store, id, title, category, cost);
            case 3 -> addBook(scanner, store, id, title, category, cost);
            default -> System.out.println("Invalid type! Returning to main menu.");
        }
    }

    private static void addDigitalVideoDisc(Scanner scanner, Store store, int id, String title, String category, float cost) {
        System.out.print("Enter director's name: ");
        String director = scanner.nextLine();
        int length = getValidIntInput(scanner, "Enter DVD's length (minutes): ");
        store.addMedia(new DigitalVideoDisc(id, title, category, cost, length, director));
        System.out.println("DVD added successfully!");
    }

    private static void addCompactDisc(Scanner scanner, Store store, int id, String title, String category, float cost) {
        System.out.print("Enter artist's name: ");
        String artist = scanner.nextLine();
        int nbTrack = getValidIntInput(scanner, "Enter number of tracks: ");
        ArrayList<Track> tracks = new ArrayList<>();
        for (int i = 0; i < nbTrack; i++) {
            System.out.print("Enter Track[" + i + "]'s name: ");
            String trackName = scanner.nextLine();
            scanner.nextLine();
            int trackLength = getValidIntInput(scanner, "Enter Track[" + i + "]'s length (seconds): ");
            tracks.add(new Track(trackName, trackLength));
        }
        store.addMedia(new CompactDisc(id, title, category, cost, artist, tracks));
        System.out.println("CD added successfully!");
    }

    private static void addBook(Scanner scanner, Store store, int id, String title, String category, float cost) {
        ArrayList<String> authors = new ArrayList<>();
        System.out.println("Enter author's name (Enter nothing to finish): ");
        while (true) {
            String author = scanner.nextLine();
            if (author.isEmpty()) break;
            authors.add(author);
        }
        store.addMedia(new Book(id, title, category, cost, authors));
        System.out.println("Book added successfully!");
    }

    // Utility methods
    private static int getValidIntInput(Scanner scanner, String message) {
        while (true) {
            try {
                System.out.print(message);
                return scanner.nextInt();
            } catch (InputMismatchException e) {
                System.out.println("Invalid input! Please enter a valid integer.");
                scanner.nextLine(); // Clear buffer
            }
        }
    }

    private static int getValidIntInput(Scanner scanner, String message, int min, int max) {
        while (true) {
            int value = getValidIntInput(scanner, message);
            if (value >= min && value <= max) {
                return value;
            }
            System.out.println("Please enter a value between " + min + " and " + max + ".");
        }
    }

    private static float getValidFloatInput(Scanner scanner, String message) {
        while (true) {
            try {
                System.out.print(message);
                return scanner.nextFloat();
            } catch (InputMismatchException e) {
                System.out.println("Invalid input! Please enter a valid decimal number.");
                scanner.nextLine(); // Clear buffer
            }
        }
    }


    private static void deleteMedia(Scanner scanner, Store store) {
        System.out.print("Enter item's title to delete: ");
        String title = scanner.nextLine();

        Iterator<Media> iter = store.getItemsInStore().iterator();
        while (iter.hasNext()) {
            Media item = iter.next();
            if (item.getTitle().equalsIgnoreCase(title)) {
                iter.remove();
                System.out.println(item.getClass().getSimpleName() + " '" + title + "' has been deleted!");
                return;
            }
        }
        System.out.println("Item not found!");
    }

    private static void updateMedia(Scanner scanner, Store store) {
        System.out.print("Enter item's id to update: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Clear buffer

        Media item = store.getItemsInStore().stream()
                .filter(media -> media.getId() == id)
                .findFirst()
                .orElse(null);

        if (item == null) {
            System.out.println("Item not found!");
            return;
        }

        System.out.print("Enter new title: ");
        String title = scanner.nextLine();
        System.out.print("Enter new category: ");
        String category = scanner.nextLine();
        System.out.print("Enter new cost: ");
        float cost = scanner.nextFloat();

        item.setTitle(title);
        item.setCategory(category);
        item.setCost(cost);

        System.out.println("Item updated successfully!");
    }


    private static void viewCart(Scanner scanner, Cart cart) {
        while (true) {
            cartMenu();
            int choice = getUserChoice(scanner, 0, 5);

            switch (choice) {
                case 1 -> filterCart(scanner, cart);
                case 2 -> sortCart(scanner, cart);
                case 3 -> removeMediaFromCart(scanner, cart);
                case 4 -> playMediaInCart(scanner, cart);
                case 5 -> {
                    System.out.println("Order placed. Thank you for your purchase!");
                    cart.emptyCart();
                    return;
                }
                case 0 -> {
                    return;
                }
            }
        }
    }

    private static void filterCart(Scanner scanner, Cart cart) {
        System.out.println("1. Filter by ID");
        System.out.println("2. Filter by Title");
        int choice = getUserChoice(scanner, 1, 2);

        if (choice == 1) {
            System.out.print("Enter ID: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Đọc ký tự newline còn lại trong bộ đệm sau khi nhập số
            cart.SearchById(id);
        } else {
            System.out.print("Enter Title: ");
            String title = scanner.nextLine().trim();  // Loại bỏ khoảng trắng và ký tự xuống dòng thừa
            System.out.println("Searching for title: '" + title + "'");  // In ra để kiểm tra xem input có hợp lệ không
            cart.SearchByTitle(title);
        }
    }


    private static void sortCart(Scanner scanner, Cart cart) {
        System.out.println("1. Sort by Title");
        System.out.println("2. Sort by Cost");
        int choice = getUserChoice(scanner, 1, 2);

        if (choice == 1) {
            cart.sortByTitleCost();
        } else {
            cart.sortByCostTitle();
        }
        cart.print();
    }

    private static void removeMediaFromCart(Scanner scanner, Cart cart) {
        System.out.print("Enter the title of the media: ");
        String title = scanner.nextLine();
        Media media = cart.findMedia(title);

        if (media != null) {
            cart.removeMedia(media);
        } else {
            System.out.println("Media not found in the cart.");
        }
    }

    private static void playMediaInCart(Scanner scanner, Cart cart) {
        System.out.print("Enter the title of the media: ");
        String title = scanner.nextLine();
        Media media = cart.findMedia(title);

        if (media instanceof Playable playable) {
            playable.play();
        } else {
            System.out.println("This media cannot be played or was not found.");
        }
    }

    private static int getUserChoice(Scanner scanner, int min, int max) {
        while (true) {
            try {
                int choice = Integer.parseInt(scanner.nextLine());
                if (choice >= min && choice <= max) {
                    return choice;
                }
                System.out.println("Invalid choice. Please enter a number between " + min + " and " + max + ".");
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid number.");
            }
        }
    }
}
